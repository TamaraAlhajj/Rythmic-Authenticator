hist(surveyData$X1,
main="Histogram of Successful Login",
xlab="Failed Logins Per User",
ylab="Frequency",
border="pink",
col="red");
surveyData = data.frame(read.csv("SurveyDataFiltered.csv", header = TRUE, sep = ","));
hist(surveyData$,
main="Histogram of Successful Login",
xlab="Failed Logins Per User",
ylab="Frequency",
border="pink",
col="red");
hist(surveyData$rate.1,
main="Histogram of Successful Login",
xlab="Failed Logins Per User",
ylab="Frequency",
border="pink",
col="red");
hist(surveyData$rate.2,
main="Histogram of Rating 2",
xlab="Failed Logins Per User",
ylab="Frequency",
border="pink",
col="red");
hist(surveyData$rate.1,
main="Histogram of Rating 2",
xlab="Failed Logins Per User",
ylab="Frequency",
border="pink",
col="red");
hist(surveyData$rate.1,
main="Histogram of Rating 1",
xlab="?",
ylab="Frequency",
border="pink",
col="red");
pie(surveyData);
pie(surveyData$rate.1);
surveyDataTransposed = data.frame(read.csv("SurveyTransposed.csv", header = TRUE, sep = ","));
pie(surveyDataTransposed$Q1)
pie(surveyDataTransposed$Q1);
pie(surveyDataTransposed$Q2);
pie(surveyDataTransposed$Q3);
pie(surveyDataTransposed$Q4);
pie(surveyDataTransposed$Q5);
pie(surveyDataTransposed$Q6);
pie(surveyDataTransposed$Q7);
pie(surveyDataTransposed$Q8);
pie(surveyDataTransposed$Q9);
pie(surveyDataTransposed$Q10);
pie(surveyDataTransposed$Q11);
pie(surveyDataTransposed$Q12);
pie(surveyDataTransposed$Q13);
pie(surveyDataTransposed$Q14);
pie(surveyDataTransposed$Q15);
pie(surveyDataTransposed$Q1, main="Is the password easy to remember?");
pie(surveyDataTransposed$Q2, main ="Is the password versatile?");
pie(surveyDataTransposed$Q3, main="Is the password scheme easy to use?");
pie(surveyDataTransposed$Q4, main="Are the vibrations easy to tell apart?");
pie(surveyDataTransposed$Q5, main="Are the vibrations easy to remember?");
pie(surveyDataTransposed$Q6, main="Does having sound on help to remember the sequence?");
pie(surveyDataTransposed$Q8, main="Is it easy to remember passwords for different accounts? ");
pie(surveyDataTransposed$Q9, main="Is it easy to differentiate between passwords?");
pie(surveyDataTransposed$Q7, main="Would you trust your information to be secure with this password scheme?");
pie(surveyDataTransposed$Q12, main="Is the password entry time frame too long?");
pie(surveyDataTransposed$Q13, main="Is the password scheme complex enough?");
pie(surveyDataTransposed$Q10, main="Does having a repeat option help to remember the password?");
pie(surveyDataTransposed$Q11, main="Does the repeat button help you to succeed within 3 attempts?");
pie(surveyDataTransposed$Q1, main="Is the password easy to remember?");
pie(surveyDataTransposed$Q2, main ="Is the password versatile?");
pie(surveyDataTransposed$Q3, main="Is the password scheme easy to use?");
pie(surveyDataTransposed$Q4, main="Are the vibrations easy to tell apart?");
pie(surveyDataTransposed$Q5, main="Are the vibrations easy to remember?");
pie(surveyDataTransposed$Q5, main="Are the vibrations easy to remember?");
pie(surveyDataTransposed$Q6, main="Does having sound on help to remember the sequence?");
pie(surveyDataTransposed$Q7, main="Would you trust your information to be secure with this password scheme?");
pie(surveyDataTransposed$Q8, main="Is it easy to remember passwords for different accounts? ");
pie(surveyDataTransposed$Q9, main="Is it easy to differentiate between passwords?");
pie(surveyDataTransposed$Q8, main="Is it easy to remember passwords for different accounts? ");
pie(surveyDataTransposed$Q9, main="Is it easy to differentiate between passwords?");
pie(surveyDataTransposed$Q10, main="Does having a repeat option help to remember the password?");
pie(surveyDataTransposed$Q12, main="Is the password entry time frame too long?");
pie(surveyDataTransposed$Q13, main="Is the password scheme complex enough?");
pie(surveyDataTransposed$Q14, main="Is the password scheme user friendly?");
pie(surveyDataTransposed$Q15, main="Are you satisfied with this password scheme?");
pie(surveyDataTransposed$Q14, main="Is the password scheme user friendly?");
#data filtered from Part1Section2.R
filteredData = read.csv("Part1DescriptiveStats.csv");
#text password information
text <- subset(filteredData, Password.Scheme == "testtextrandom")
#text password information
textData <- subset(filteredData, Password.Scheme == "testtextrandom")
View(textData)
View(textData)
## INFER. STATS. ##
tTestSuccessLoginCount = t.test(textData$Successful.Logins, fullData$success);
View(tTestSuccessLoginCount)
View(tTestSuccessLoginCount)
## INFER. STATS. ##
tTestSuccessLoginCount = data.frame(t.test(textData$Successful.Logins, fullData$success));
## INFER. STATS. ##
tTestSuccessLoginCount = table(t.test(textData$Successful.Logins, fullData$success));
## INFER. STATS. ##
tTestSuccessLoginCount = t.test(textData$Successful.Logins, fullData$success);
tTestSuccessLoginCount
library
library
library
library
library
library
library(knitr)
## INFER. STATS. ##
tTestSuccessLoginCount = t.test(textData$Successful.Logins, fullData$success);
tTestSuccessLoginCount
tTestSuccessLoginCount$parameter
tTestSuccessLoginCount$statistic
tTestSuccessLoginCount$method
data.frame(tTestSuccessLoginCount$statistic,tTestSuccessLoginCount$parameter,tTestSuccessLoginCount$p.value);
success = data.frame(t, df, p-value)
t = tTestSuccessLoginCount$statistic
df = TestSuccessLoginCount$parameter
p_value = TestSuccessLoginCount$p.value
t = tTestSuccessLoginCount$statistic
df = TestSuccessLoginCount$parameter
p_value = tTestSuccessLoginCount$p.value
success = data.frame(t, df, p_value)
t = tTestSuccessLoginCount$statistic
df = TestSuccessLoginCount$parameter
p_value = tTestSuccessLoginCount$p.value
t = tTestSuccessLoginCount$statistic
## INFER. STATS. ##
tTestSuccessLoginCount = t.test(textData$Successful.Logins, fullData$success);
t = tTestSuccessLoginCount$statistic
df = tTestSuccessLoginCount$parameter
p_value = tTestSuccessLoginCount$p.value
success <- data.frame(t, df, p_value)
View(success)
View(success)
tTestFailedLoginCount = t.test(textData$Failed.Logins, fullData$failure);
t = tTestFailedLoginCount$statistic
df = tTestFailedLoginCount$parameter
p_value = tTestFailedLoginCount$p.value
failure <- data.frame(t, df, p_value)
t_test <- merge(success, failure)
View(t_test)
View(success)
View(failure)
t = tTestFailedLoginCount$statistic
df = tTestFailedLoginCount$parameter
p_value = tTestFailedLoginCount$p.value
failure <- data.frame(t, df, p_value)
t_test <- data.frame(success,failure)
View(t_test)
View(t_test)
t_test <- c(success,failure)
View(t_test)
View(t_test)
t_test <- t_test[-c(Type)]
t_test <- c(success,failure)
t_test <- rbind(success,failure)
View(t_test)
View(t_test)
## INFER. STATS. ##
tTestSuccessLoginCount = t.test(textData$Successful.Logins, fullData$success);
t = tTestSuccessLoginCount$statistic
df = tTestSuccessLoginCount$parameter
p_value = tTestSuccessLoginCount$p.value
conf = tTestSuccessLoginCount$conf.int
success <- data.frame(t, df, p_value, conf)
tTestFailedLoginCount = t.test(textData$Failed.Logins, fullData$failure);
t = tTestFailedLoginCount$statistic
df = tTestFailedLoginCount$parameter
p_value = tTestFailedLoginCount$p.value
conf = tTestSuccessLoginCount$conf.int
success <- data.frame(t, df, p_value, conf)
## INFER. STATS. ##
tTestSuccessLoginCount = t.test(textData$Successful.Logins, fullData$success);
t = tTestSuccessLoginCount$statistic
df = tTestSuccessLoginCount$parameter
p_value = tTestSuccessLoginCount$p.value
success <- data.frame(t, df, p_value)
tTestFailedLoginCount = t.test(textData$Failed.Logins, fullData$failure);
t = tTestFailedLoginCount$statistic
df = tTestFailedLoginCount$parameter
p_value = tTestFailedLoginCount$p.value
failure <- data.frame(t, df, p_value)
t_test <- rbind(success,failure);
t_test <- rbind(success,failure);
write.csv(t_test, "tTest.csv");
#text
hist(text$Number.of.Logins,
main="Histogram of Number of Login using Text Password Scheme",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
histNumLogins_text = recordPlot();
plot.new();
#image
hist(image$Number.of.Logins,
main="Histogram of Number of Login using Image Password Scheme",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
histNumLogins_image = recordPlot();
#image
hist(image$Number.of.Logins,
main="Histogram of Number of Login using Image Password Scheme",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
histNumLogins_image = recordPlot();
#data filtered from Part1Section2.R
filteredData = read.csv("Part1DescriptiveStats.csv");
#filter by password scheme
scheme = list(filteredData$Password.Scheme);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
meanNumLogins_successful = aggregate(filteredData[3], scheme, mean);
meanNumLogins_failure = aggregate(filteredData[4], scheme, mean);
#combine to create table
meanNumLogins = data.frame(meanNumLogins_total, meanNumLogins_successful, meanNumLogins_failure);
#rename column and delete un-used columns
colnames(meanNumLogins)[1]<-"Password.Scheme";
meanNumLogins$Group.1.1 <- NULL;
meanNumLogins$Group.1.2 <- NULL;
##Login times
meanLoginTimes_successful = aggregate(filteredData[5], scheme, mean);
meanLoginTimes_failure = aggregate(filteredData[6], scheme, mean, na.rm=TRUE, na.action=NULL);
#combine to create table
meanLoginTimes = data.frame(meanLoginTimes_successful, meanLoginTimes_failure);
#rename column and delete un-used columns
colnames(meanLoginTimes)[1]<-"Password.Scheme";
meanLoginTimes$Group.1.1 <- NULL;
meanLoginTimes$Group.1.2 <- NULL;
#create complete mean table with both data frames
meanTable <- merge(meanNumLogins, meanLoginTimes, by="Password.Scheme");
##Logins per user
sdNumLogins_total = aggregate(filteredData[2], scheme, sd);
sdNumLogins_successful =  aggregate(filteredData[3], scheme, sd);
sdNumLogins_failure =  aggregate(filteredData[4], scheme, sd);
#combine to create table
sdNumLogins = data.frame(sdNumLogins_total, sdNumLogins_successful, sdNumLogins_failure);
#data filtered from Part1Section2.R
filteredData = read.csv("Part1DescriptiveStats.csv");
#filter by password scheme
scheme = list(filteredData$Password.Scheme);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
meanNumLogins_successful = aggregate(filteredData[3], scheme, mean);
meanNumLogins_failure = aggregate(filteredData[4], scheme, mean);
#data filtered from Part1Section2.R
filteredData = read.csv("Part1DescriptiveStats.csv");
#filter by password scheme
scheme = list(filteredData$Password.Scheme);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
textData = read.csv("Text21.csv"); #CSV data set containing the log data for the text password scheme
imageData = read.csv("Imagept21.csv"); #CSV data set containing the log data for the image password scheme
textDataLogins <- subset(textData, register == "login"); # Subset of the text logs containing only login attempts
textDataSuccessful <- subset(textDataLogins, success == "success"); # Successful login logs
textDataFailed <- subset(textDataLogins, success == "failure"); # Failed login logs
textDataDiffTimeSuccess <- data.frame(ID=factor(), timeDiff=factor()); # Empty data frame that will store the successful login times
textDataDiffTimeFail <- data.frame(ID=factor(), timeDiff=factor()); #Empty data frame that will store the failed login times
#Repeating the process above but for the image password scheme
imageDataLogins <- subset(imageData, register == "login");
imageDataSuccessful <- subset(imageDataLogins, success == "success");
imageDataFailed <- subset(imageDataLogins, success == "failure");
imageDataDiffTimeFail <- data.frame(ID=factor(), timeDiff=factor());
imageDataDiffTimeSuccess <- data.frame(ID=factor(), timeDiff=factor());
prevTxtRow <- textData[1, 'X2017.07.05.14.49.36']; # Row that will be used to store what time the user entered the login page
# This loops through each row in the logs, finds each login attempt, and calculates the amount of time spent on each attempt
for (row in 1:nrow(textData)) {
id <- textData[row, 'ast103']; # The user ID of the current row
register <- textData[row, 'register']; # Usage mode of the current row
login <- textData[row, 'success']; # The event status of the current row
time  <- textData[row, 'X2017.07.05.14.49.36']; # The timestamp on the current row
if (register == "enter" & login == "start") { # This tracks what time the user first entered the login page
prevTxtRow <- textData[row, 'X2017.07.05.14.49.36'];
}
else if (register == "login" & login == "success") { # If the login was successful, add the number of seconds passed to our table
newRow <- data.frame(ID=id,timeDiff=difftime(time, prevTxtRow, units='secs'));
textDataDiffTimeSuccess <- rbind(textDataDiffTimeSuccess, newRow);
}
else if (register == "login" & login == "failure") {
newRow <- data.frame(ID=id,timeDiff=difftime(time, prevTxtRow, units='secs'));
textDataDiffTimeFail <- rbind(textDataDiffTimeFail, newRow);
}
}
# Repeating the proccess above for the image password scheme
prevImgRow <- imageData[1, 'X2017.07.05.14.32.37'];
for (row in 1:nrow(imageData)) {
id <- imageData[row, 'ipt101'];
register <- imageData[row, 'register'];
login <- imageData[row, 'success'];
time  <- imageData[row, 'X2017.07.05.14.32.37'];
if (register == "enter" & login == "start") {
prevImgRow <- imageData[row, 'X2017.07.05.14.32.37'];
}
else if (register == "login" & login == "success") {
newRow <- data.frame(ID=id,timeDiff=difftime(time, prevImgRow, units='secs'));
imageDataDiffTimeSuccess <- rbind(imageDataDiffTimeSuccess, newRow);
}
else if (register == "login" & login == "failure") {
newRow <- data.frame(ID=id,timeDiff=difftime(time, prevImgRow, units='secs'));
imageDataDiffTimeFail <- rbind(imageDataDiffTimeFail, newRow);
}
}
textDataScheme = "testtextrandom"; # The text password scheme
textDataLoginsTable = table(textDataLogins$ast103); # Table containing the total login frequency for each user
textDataSuccessesTable = table(textDataSuccessful$ast103); # Table containing the successful login frequency for each user
textDataFailuresTable = table(textDataFailed$ast103); # Table containing the failed login frequency for each user
textDataDiffTimeSuccessTable = aggregate(textDataDiffTimeSuccess[2], list(textDataDiffTimeSuccess$ID), mean); # Dataframe containing the average time spent logging in on a successful attempt
# Users that did not fail any login attempts were missing from the dataframe contatining the average time spent on a failed login.
# By joining the dataframe with one containing the frequency of failed logins we were able to keep a row for every user
textDataDiffTimeFailTableAvg = aggregate(textDataDiffTimeFail[2], list(textDataDiffTimeFail$ID), mean);
textDataDiffTimeFailFrequency = data.frame(table(textDataDiffTimeFail$ID));
colnames(textDataDiffTimeFailTableAvg) <- c("ID", "Mean");
colnames(textDataDiffTimeFailFrequency) <- c("ID", "Frequency");
textDataDiffTimeFailTable = merge (textDataDiffTimeFailTableAvg, textDataDiffTimeFailFrequency, by="ID", all = TRUE);
textDataDiffTimeFailTable$Frequency <- NULL;
# Creating the final table containing all the summarized data for the text password scheme
textDataFull = data.frame(textDataLoginsTable, textDataSuccessesTable, textDataFailuresTable, textDataDiffTimeSuccessTable, textDataDiffTimeFailTable, textDataScheme);
textDataFull$Var1.1 <- NULL;
textDataFull$Var1.2 <- NULL;
textDataFull$Group.1 <- NULL;
textDataFull$ID <- NULL;
colnames(textDataFull) <- c("User ID", "Number of Logins", "Successful Logins", "Failed Logins", "Average Successful Login Time",  "Average Failed Login Time", "Password Scheme");
#Repeating the proccess above for the image password scheme
imageDataScheme = "testpasstiles";
imageDataLoginsTable = table(imageDataLogins$ipt101);
imageDataFailuresTable = table(imageDataFailed$ipt101);
imageDataDiffTimeSuccessTable = aggregate(imageDataDiffTimeSuccess[2], list(imageDataDiffTimeSuccess$ID), mean);
imageDataSuccessesTable = table(imageDataSuccessful$ipt101);
imageDataDiffTimeFailTableAvg = aggregate(imageDataDiffTimeFail[2], list(imageDataDiffTimeFail$ID), mean);
imageDataDiffTimeFailFrequency = data.frame(table(imageDataDiffTimeFail$ID));
colnames(imageDataDiffTimeFailTableAvg) <- c("ID", "Mean");
colnames(imageDataDiffTimeFailFrequency) <- c("ID", "Frequency");
imageDataDiffTimeFailTable = merge (imageDataDiffTimeFailTableAvg, imageDataDiffTimeFailFrequency, by="ID", all = TRUE);
imageDataDiffTimeFailTable$Frequency <- NULL;
imageDataFull = data.frame(imageDataLoginsTable, imageDataSuccessesTable, imageDataFailuresTable, imageDataDiffTimeSuccessTable, imageDataDiffTimeFailTable, imageDataScheme);
imageDataFull$Var1.1 <- NULL;
imageDataFull$Var1.2 <- NULL;
imageDataFull$Group.1 <- NULL;
imageDataFull$ID <- NULL;
colnames(imageDataFull) <- c("User ID", "Number of Logins", "Successful Logins", "Failed Logins", "Average Successful Login Time",  "Average Failed Login Time", "Password Scheme");
#Creating a new dataframe to hold the data from the all the users accross both password schemes
fullData <- data.frame(ID=factor(), total=factor(), succ=factor(), fail=factor(), avgS=factor(), avgF=factor(), scheme=factor());
fullData <- rbind(fullData, textDataFull);
fullData <- rbind(fullData, imageDataFull);
colnames(fullData) <- c("User ID", "Number of Logins", "Successful Logins", "Failed Logins", "Average Successful Login Time",  "Average Failed Login Time", "Password Scheme")
## REMOVE INVALID DATA ##
fullData <- fullData[-c(28), ]
#create csv to use for Part1Section3.R
write.csv(fullData, "Part1DescriptiveStats.csv");
#data filtered from Part1Section2.R
filteredData = read.csv("Part1DescriptiveStats.csv");
#filter by password scheme
scheme = list(filteredData$Password.Scheme);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
meanNumLogins_failure = aggregate(filteredData[4], scheme, mean);
meanNumLogins_successful = aggregate(filteredData[3], scheme, mean);
#combine to create table
meanNumLogins = data.frame(meanNumLogins_total, meanNumLogins_successful, meanNumLogins_failure);
#rename column and delete un-used columns
colnames(meanNumLogins)[1]<-"Password.Scheme";
meanNumLogins$Group.1.1 <- NULL;
#data filtered from Part1Section2.R
filteredData = read.csv("Part1DescriptiveStats.csv");
#filter by password scheme
scheme = list(filteredData$Password.Scheme);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
meanNumLogins_failure = aggregate(filteredData[4], scheme, mean);
meanNumLogins_successful = aggregate(filteredData[3], scheme, mean);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean, na.rm=TRUE, na.action=NULL);
View(filteredData)
View(filteredData)
#create csv to use for Part1Section3.R
write.csv(fullData, "Part1DescriptiveStats.csv", row.names = FALSE);
#data filtered from Part1Section2.R
filteredData = read.csv("Part1DescriptiveStats.csv");
#filter by password scheme
scheme = list(filteredData$Password.Scheme);
##Logins per user
meanNumLogins_total = aggregate(filteredData[2], scheme, mean);
meanNumLogins_successful = aggregate(filteredData[3], scheme, mean);
meanNumLogins_failure = aggregate(filteredData[4], scheme, mean);
#combine to create table
meanNumLogins = data.frame(meanNumLogins_total, meanNumLogins_successful, meanNumLogins_failure);
#rename column and delete un-used columns
colnames(meanNumLogins)[1]<-"Password.Scheme";
meanNumLogins$Group.1.1 <- NULL;
meanNumLogins$Group.1.2 <- NULL;
##Login times
meanLoginTimes_successful = aggregate(filteredData[5], scheme, mean);
meanLoginTimes_failure = aggregate(filteredData[6], scheme, mean, na.rm=TRUE, na.action=NULL);
#combine to create table
meanLoginTimes = data.frame(meanLoginTimes_successful, meanLoginTimes_failure);
meanLoginTimes$Group.1.1 <- NULL;
meanLoginTimes$Group.1.2 <- NULL;
#rename column and delete un-used columns
colnames(meanLoginTimes)[1]<-"Password.Scheme";
#create complete mean table with both data frames
meanTable <- merge(meanNumLogins, meanLoginTimes, by="Password.Scheme");
##Logins per user
sdNumLogins_total = aggregate(filteredData[2], scheme, sd);
sdNumLogins_successful =  aggregate(filteredData[3], scheme, sd);
sdNumLogins_failure =  aggregate(filteredData[4], scheme, sd);
#combine to create table
sdNumLogins = data.frame(sdNumLogins_total, sdNumLogins_successful, sdNumLogins_failure);
#rename column and delete un-used columns
colnames(sdNumLogins)[1]<-"Password.Scheme";
sdNumLogins$Group.1.1 <- NULL;
sdNumLogins$Group.1.2 <- NULL;
##Login times
sdLoginTimes_successful = aggregate(filteredData[5], scheme, sd);
sdLoginTimes_failure =  aggregate(filteredData[6], scheme, sd, na.rm=TRUE);
#combine to create table
sdLoginTimes = data.frame(sdLoginTimes_successful, sdLoginTimes_failure);
#rename column and delete un-used columns
colnames(sdLoginTimes)[1]<-"Password.Scheme";
sdLoginTimes$Group.1.1 <- NULL;
sdLoginTimes$Group.1.2 <- NULL;
#create complete standard deviation table with both data frames
sdTable <- merge(sdNumLogins, sdLoginTimes, by="Password.Scheme");
##Logins per user
medianNumLogins_total = aggregate(filteredData[2], scheme, median);
medianNumLogins_successful =  aggregate(filteredData[3], scheme, median);
#combine to create table
medianNumLogins = data.frame(medianNumLogins_total, medianNumLogins_successful, medianNumLogins_failure);
medianNumLogins_failure =  aggregate(filteredData[4], scheme, median);
#rename column and delete un-used columns
colnames(medianNumLogins)[1]<-"Password.Scheme";
medianNumLogins$Group.1.1 <- NULL;
medianNumLogins$Group.1.2 <- NULL;
##Login times
medianLoginTimes_successful = aggregate(filteredData[5], scheme, median);
#combine to create table
medianLoginTimes = data.frame(medianLoginTimes_successful, medianLoginTimes_failure);
#rename column and delete un-used columns
colnames(medianLoginTimes)[1]<-"Password.Scheme";
medianLoginTimes_failure =  aggregate(filteredData[6], scheme, median, na.rm=TRUE);
medianLoginTimes$Group.1.1 <- NULL;
medianLoginTimes$Group.1.2 <- NULL;
##create standard deviation table with both data frames
medianTable <- merge(medianNumLogins, medianLoginTimes, by="Password.Scheme");
#text password information
text <- subset(filteredData, Password.Scheme == "testtextrandom")
#image password information
image <- subset(filteredData, Password.Scheme == "testpasstiles")
#text
hist(text$Number.of.Logins,
main="Histogram of Number of Login using Text Password Scheme",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
histNumLogins_text = recordPlot();
plot.new();
#image
hist(image$Number.of.Logins,
main="Histogram of Number of Login using Image Password Scheme",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
#text
hist(text$Number.of.Logins,
main="Histogram of Number of Login using Text Password Scheme",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
plot.new();
#image
hist(image$Number.of.Logins,
main="Histogram of Number of Login using Image Password Scheme",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
plot.new();
#total for both
hist(filteredData$Number.of.Logins,
main="Histogram of Total Number of Login Across Both Schemes",
xlab="Total Logins Per User",
ylab="Frequency",
border="light blue",
col="dark blue");
histNumLogins_total = recordPlot();
histNumLogins_total = recordPlot();
plot.new();
#text
hist(text$Successful.Logins,
main="Histogram of Successful of Login using Text Password Scheme",
xlab="Successful Logins Per User",
ylab="Frequency",
border="dark green",
col="light green");
